# SOME DESCRIPTIVE TITLE.
# Copyright (C) pgRouting Contributors - Version 2.0.0 (b19690f doc-merge)
# This file is distributed under the same license as the pgRouting package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pgRouting 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-24 15:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../src/kdijkstra/doc/index.rst:13
# 321a2d444abf468a90711a7e0d2c2632
msgid "pgr_kDijkstra - Mutliple destination Shortest Path Dijkstra"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:21
# e79fa12d3f2646dba7b0fecc8ebb3db8
msgid "Name"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:23
# d9f49d8a02ce47dfb286613acd899230
msgid "``pgr_kdijkstraCost`` - Returns the costs for K shortest paths using Dijkstra algorithm."
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:24
# eaba512b56f746e68d8b0596b2236603
msgid "``pgr_kdijkstraPath`` - Returns the paths for K shortest paths using Dijkstra algorithm."
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:28
# 1f33329c6918489a9360f3f05f91a5e5
msgid "Synopsis"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:30
# f246b5beb7a84fd29e22bff9729a11b8
msgid "These functions allow you to have a single start node and multiple destination nodes and will compute the routes to all the destinations from the source node. Returns a set of :ref:`pgr_costResult3 <type_cost_result3>` or :ref:`pgr_costResult3 <type_cost_result3>`. ``pgr_kdijkstraCost`` returns one record for each destination node and the cost is the total code of the route to that node. ``pgr_kdijkstraPath`` returns one record for every edge in that path from source to destination and the cost is to traverse that edge."
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:42
# 4d073996761445fe92adf32a152cd99e
msgid "Description"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:44
# 34aae6f8476f4c73b6d780aec323a7f2
msgid "a SQL query, which should return a set of rows with the following columns:"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:51
# f7a64250d6b44382ad4755c1fda7392b
msgid "``int4`` identifier of the edge"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:52
# ecd14cf38909448a87b3541ca6b8683f
msgid "``int4`` identifier of the source vertex"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:53
# 31ae557bbf954747ac55210035341e61
msgid "``int4`` identifier of the target vertex"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:54
# 4ad7cad1a8374f029ba8163961933966
msgid "``float8`` value, of the edge traversal cost. A negative cost will prevent the edge from being inserted in the graph."
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:55
# 7423095b6c724d6bbeb94e8bc81e5045
msgid "(optional) the cost for the reverse traversal of the edge. This is only used when the ``directed`` and ``has_rcost`` parameters are ``true`` (see the above remark about negative costs)."
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:57
# e006660aa8fe43889829a3fb9129722e
msgid "``int4`` id of the start point"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:58
# 5902a09a1c8843dd86f773ac9a02742b
msgid "``int4[]`` an array of ids of the end points"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:59
# 7ef04792acbd48eba2dfac459fa5d246
msgid "``true`` if the graph is directed"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:60
# 01a01d93e6cc44f3b437ae8a0638bd98
msgid "if ``true``, the ``reverse_cost`` column of the SQL generated set of rows will be used for the cost of the traversal of the edge in the opposite direction."
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:63
# f97cec15230f45d0b682bd48370f036a
msgid "``pgr_kdijkstraCost`` returns set of :ref:`type_cost_result`:"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:65
#: ../../../src/kdijkstra/doc/index.rst:73
# 444acaa21b8d49b1a199d3c98d061da5
# 3afefd4792044712a85101225a520776
msgid "row sequence"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:66
# f91b69aec2754787b2e0546c0e9d5b8d
msgid "path vertex source id (this will always be source start point in the query)."
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:67
# 28e57f8b708a4fcfb61b45bef618b32a
msgid "path vertex target id"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:68
# a77a25a88d0a43f2a1785927cc97fab5
msgid "cost to traverse the path from ``id1`` to ``id2``. Cost will be -1.0 if there is no path to that target vertex id."
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:71
# cf8954ea0a5049bcb69571c00c870bfd
msgid "``pgr_kdijkstraPath`` returns set of :ref:`type_cost_result3`:"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:74
# 44cee94dc70d409a82748324c968d441
msgid "path target id (identifies the target path)."
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:75
# 64d54eda8e3a49f38b12fe36a607cd14
msgid "path edge source node id"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:76
# 011bd73b0bf44f34aae133abed6fea7f
msgid "path edge id (``-1`` for the last row)"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:77
# b457a094c550405080dbc41bd88797f4
msgid "cost to traverse this edge or -1.0 if there is no path to this target"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:81
# 1111e0b2e1ec4565a9eb3cb35ebfca97
msgid "History"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:82
# 5de8275fef754c6c88bea5e5db3cfd52
msgid "New in version 2.0.0"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:86
# caab19edab694293be8ab9fe5000e071
msgid "Examples"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:88
# 51dfaec15b51441a92854a7600ab3970
msgid "Returning a ``cost`` result"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:123
# 0c705d0e2cac4fd18cc45a401790b3e2
msgid "Returning a ``path`` result"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:144
# 1bfccc73ccde407fa34f8c9618d6f554
msgid "There is no assurance that the result above will be ordered in the direction of flow of the route, ie: it might be reversed. You will need to check if ``st_startPoint()`` of the route is the same as the start node location and if it is not then call ``st_reverse()`` to reverse the direction of the route. This behavior is a function of PostGIS functions ``st_linemerge()`` and ``st_union()`` and not pgRouting."
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:153
# b7a116ab40884da09e5f686ef41af548
msgid "See Also"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:155
# 17c6245299574655bd1eb989883ce059
msgid ":ref:`type_cost_result`"
msgstr ""

#: ../../../src/kdijkstra/doc/index.rst:156
# 34ebfed0f3964ad6b42644c80b51c99e
msgid "http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"
msgstr ""

