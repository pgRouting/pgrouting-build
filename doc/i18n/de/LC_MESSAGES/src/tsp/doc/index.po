# SOME DESCRIPTIVE TITLE.
# Copyright (C) pgRouting Contributors - Version 2.0.0 (ec59fc1 develop)
# This file is distributed under the same license as the pgRouting package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-22 13:52\n"
"PO-Revision-Date: 2013-09-22 06:20+0000\n"
"Last-Translator: Daniel Kastl\n"
"Language-Team: German (http://www.transifex.com/projects/p/pgrouting/language/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 588bb56f073f49f89c741579fbc2c17c
#: ../../../src/tsp/doc/index.rst:13
msgid "pgr_tsp - Traveling Sales Person"
msgstr ""

# f69daf53ba3c47ca846fbcbbcf6aa25d
#: ../../../src/tsp/doc/index.rst:23
msgid "Name"
msgstr "Name"

# 5ccbfce91c604bac96d73fdbc656f675
#: ../../../src/tsp/doc/index.rst:25
msgid ""
"``pgr_tsp`` - Returns the best route from a start node via a list of nodes."
msgstr ""

# cd69b4b6495b448fa23e10806d8cd704
#: ../../../src/tsp/doc/index.rst:26
msgid ""
"``pgr_tsp`` - Returns the best route order when passed a disance matrix."
msgstr ""

# eee8057e1f874582a8d82dbf95c33b83
#: ../../../src/tsp/doc/index.rst:27
msgid ""
"``pgr_makeDistanceMatrix`` - Returns a Eucleadian distance Matrix from the "
"points provided in the sql result."
msgstr ""

# c0ecbed749044ceea6ac67da6a92e851
#: ../../../src/tsp/doc/index.rst:31
msgid "Synopsis"
msgstr "Ãœbersicht"

# bccf8e0d00d545fbb53db8de741e3629
#: ../../../src/tsp/doc/index.rst:33
msgid ""
"The travelling salesman problem (TSP) or travelling salesperson problem asks"
" the following question: Given a list of cities and the distances between "
"each pair of cities, what is the shortest possible route that visits each "
"city exactly once and returns to the origin city? This algoritm uses "
"simulated annealing to return a high quality approximate solution. Returns a"
" set of :ref:`pgr_costResult <type_cost_result>` (seq, id1, id2, cost) rows,"
" that make up a path."
msgstr ""

# 4817fee0103a41c4816125ab5b8e50c9
#: ../../../src/tsp/doc/index.rst:41
msgid ""
"Returns a set of (seq integer, id1 integer, id2 integer, cost float8) that "
"is the best order to visit the nodes in the matrix. ``id1`` is the index "
"into the distance matrix. ``id2`` is the point id from the sql."
msgstr ""

# d81ab41209864a73a7ffa72604da479d
#: ../../../src/tsp/doc/index.rst:43
msgid ""
"If no ``end_id`` is supplied or it is -1 or equal to the start_id then the "
"TSP result is assumed to be a circluar loop returning back to the start. If "
"``end_id`` is supplied then the route is assumed to start and end the the "
"designated ids."
msgstr ""

# 50853fe7ce3a4230ba1ad32e1820ff86
#: ../../../src/tsp/doc/index.rst:52
msgid "Description"
msgstr "Beschreibung"

# 5c75019d15bb43c39560772bc3ee4607
#: ../../../src/tsp/doc/index.rst:55
msgid "With Euclidean distances"
msgstr ""

# 66a3e0216d3948b082421f130af849fc
#: ../../../src/tsp/doc/index.rst:56
msgid ""
"The TSP solver is based on ordering the points using straight line "
"(euclidean) distance [#f0]_ between nodes. The implementation is using an "
"approximation algorithm that is very fast. It is not an exact solution, but "
"it is guaranteed that a solution is returned after certain number of "
"iterations."
msgstr ""

# 7b0c0aa5e05b441ea75bea14ed4902cd
#: ../../../src/tsp/doc/index.rst:58
msgid ""
"a SQL query, which should return a set of rows with the following columns:"
msgstr ""

# 370960d08a674040ba2f83ed085dbb48
#: ../../../src/tsp/doc/index.rst:64
msgid "``int4`` identifier of the vertex"
msgstr ""

# 041d921890f847d1bcb77251f630f8d5
#: ../../../src/tsp/doc/index.rst:65
msgid "``float8`` x-coordinate"
msgstr ""

# 8662fbcf22f74a82900515c839683881
#: ../../../src/tsp/doc/index.rst:66
msgid "``float8`` y-coordinate"
msgstr ""

# c71cd39ce3cf4e3e9301579f9a596cdb
#: ../../../src/tsp/doc/index.rst:68
msgid "``int4`` id of the start point"
msgstr ""

# 5165a6a173194137bb498d88e0957b35
#: ../../../src/tsp/doc/index.rst:69
msgid ""
"``int4`` id of the end point, This is *OPTIONAL*, if include the route is "
"optimized from start to end, otherwise it is assumed that the start and the "
"end are the same point."
msgstr ""

# d73e6887338e4da3a107b753d970eb83
#: ../../../src/tsp/doc/index.rst:72
msgid "The function returns set of :ref:`type_cost_result`:"
msgstr ""

# 6a00ce9fe1e84a708606d26b563355af
# c113028794ef4a08a59271625c0ae721
#: ../../../src/tsp/doc/index.rst:74 ../../../src/tsp/doc/index.rst:107
msgid "row sequence"
msgstr ""

# 486fb735dda64593ba3d2773c140d01f
#: ../../../src/tsp/doc/index.rst:75
msgid "internal index to the distance matric"
msgstr ""

# 47f9555a7ecb4013a9b7b1744788a432
#: ../../../src/tsp/doc/index.rst:76
msgid "``id`` of the node"
msgstr ""

# 879b651101634a9fa1850e585291b13d
#: ../../../src/tsp/doc/index.rst:77
msgid "cost to traverse from the current node to the next node."
msgstr ""

# 1219dbad1dbc483e8c66e492b2ddbb85
#: ../../../src/tsp/doc/index.rst:80
msgid "Create a distance matrix"
msgstr ""

# 0c6c6e0816e1404798c896777ad941f2
#: ../../../src/tsp/doc/index.rst:81
msgid ""
"For users that need a distance matrix we have a simple function that takes "
"SQL in ``sql`` as described above and returns a record with ``dmatrix`` and "
"``ids``."
msgstr ""

# a9ebba1a8cbb4af9a325f5ebcf4c9c50
#: ../../../src/tsp/doc/index.rst:87
msgid "The function returns a record of ``dmatrix``, ``ids``:"
msgstr ""

# 79831990a066442dbf3d4f24cebf6aef
#: ../../../src/tsp/doc/index.rst:89
msgid "``float8[][]`` a symeteric Euclidean distance matrix based on ``sql``."
msgstr ""

# afbd6f830d5c4ab2847548f86f90dca1
#: ../../../src/tsp/doc/index.rst:90
msgid ""
"``integer[]`` an array of ids as they are ordered in the distance matrix."
msgstr ""

# f0b8169b552646f980bd6b7e0e4b580c
#: ../../../src/tsp/doc/index.rst:94
msgid "With distance matrix"
msgstr ""

# e50bb0a665844d7682d3a1b216adb70e
#: ../../../src/tsp/doc/index.rst:95
msgid ""
"For users, that do not want to use Euclidean distances, we also provode the "
"ability to pass a distance matrix that we will solve and return an ordered "
"list of nodes for the best order to visit each. It is up to the user to "
"fully populate the distance matrix."
msgstr ""

# 900d7d9a9cfe4f48a183120d63a6b5fb
#: ../../../src/tsp/doc/index.rst:97
msgid "``float[][]`` distance matrix of points"
msgstr ""

# ffe889182e9b49e48573a830538e2f76
#: ../../../src/tsp/doc/index.rst:98
msgid "``int4`` index of the start point"
msgstr ""

# 7ff184ff9d034484941644d3528f9b11
#: ../../../src/tsp/doc/index.rst:99
msgid "``int4`` (optional) index of the end node"
msgstr ""

# a7886e5620ad48308a92c602d785b979
#: ../../../src/tsp/doc/index.rst:101
msgid ""
"The ``end`` node is an optional parameter, you can just leave it out if you "
"want a loop where the ``start`` is the depot and the route returns back to "
"the depot. If you include the ``end`` parameter, we optimize the path from "
"``start`` to ``end`` and minimize the distance of the route while include "
"the remaining points."
msgstr ""

# 3328187fb6f24c06bd2ade2fb9daff6c
#: ../../../src/tsp/doc/index.rst:103
msgid ""
"The distance matrix is a multidimensional `PostgreSQL array type "
"<http://www.postgresql.org/docs/9.1/static/arrays.html>`_ that must be ``N x"
" N`` in size."
msgstr ""

# 1768ea2352234c129198dbacd1452e65
#: ../../../src/tsp/doc/index.rst:105
msgid "The result will be N records of ``[ seq, id ]``:"
msgstr ""

# f8e56b07da754f4396ccb1daa52b8213
#: ../../../src/tsp/doc/index.rst:108
msgid "index into the matrix"
msgstr ""

# 700ed687dfd24327b5866cb91007c0ed
#: ../../../src/tsp/doc/index.rst:112
msgid "Footnotes"
msgstr ""

# bae6c65f712c4ff9b0fd388153cf42f7
#: ../../../src/tsp/doc/index.rst:113
msgid ""
"There was some thought given to pre-calculating the driving distances "
"between the nodes using Dijkstra, but then I read a paper (unfortunately I "
"don't remember who wrote it), where it was proved that the quality of TSP "
"with euclidean distance is only slightly worse than one with real distance "
"in case of normal city layout. In case of very sparse network or rivers and "
"bridges it becomes more inaccurate, but still wholly satisfactory. Of course"
" it is nice to have exact solution, but this is a compromise between quality"
" and speed (and development time also). If you need a more accurate "
"solution, you can generate a distance matrix and use that form of the "
"function to get your results."
msgstr ""

# aeabcb34ceb245ac8c9c4dd783bae696
#: ../../../src/tsp/doc/index.rst:117
msgid "History"
msgstr "Geschichte"

# 83259e3ddfad4bc8a503e3daa04b99d5
#: ../../../src/tsp/doc/index.rst:118
msgid "Renamed in version 2.0.0"
msgstr "Umbenannt in Version 2.0.0"

# 537d6a4a4cc64451857537f64823ac72
#: ../../../src/tsp/doc/index.rst:119
msgid "GAUL dependency removed in version 2.0.0"
msgstr ""

# 51493667159c4c6395a48ada45bc3ddb
#: ../../../src/tsp/doc/index.rst:123
msgid "Examples"
msgstr "Beispiele"

# 7c2ef386cc424fe5a5781147e3ea4cc2
#: ../../../src/tsp/doc/index.rst:125
msgid ""
"Using SQL parameter (all points from the table, atarting from 6 and ending "
"at 5). We have listed two queries in this example, the first might vary from"
" system to system because there are multiple equivalent answers. The second "
"query should be stable in that the length optimal route should be the same "
"regardless of order."
msgstr ""

# 41662adbab25461784b154100646e929
#: ../../../src/tsp/doc/index.rst:159
msgid "Using distance matrix (A loop starting from 1)"
msgstr ""

# 936788f1e0c2469ba7d71161a6320815
#: ../../../src/tsp/doc/index.rst:161
msgid ""
"When using just the start node you are getting a loop that starts with 1, in"
" this case, and travels through the other nodes and is implied to return to "
"the start node from the last one in the list. Since this is a circle there "
"are at least two possible paths, one clockwise and one counter-clockwise "
"that will have the same length and be equall valid. So in the following "
"example it is also possible to get back a sequence of ids = {1,0,3,2} "
"instead of the {1,2,3,0} sequence listed below."
msgstr ""

# 95907dec9016432f8b75f45be9e231c3
#: ../../../src/tsp/doc/index.rst:175
msgid "Using distance matrix (Starting from 1, ending at 2)"
msgstr ""

# c376ad2787cd4f4abf9764fbe86699b2
#: ../../../src/tsp/doc/index.rst:189
msgid ""
"Using the vertices table edge_table_vertices_pgr generated by "
":ref:`pgr_create_topology`. Again we have two queries where the first might "
"vary and the second is based on the overal path length."
msgstr ""

# c3d22bacc29d477ca8c5a118ddedb8f4
#: ../../../src/tsp/doc/index.rst:226
msgid "The queries use the :ref:`sampledata` network."
msgstr ""

# 4f5c93447689413e86e9ed2751abff8f
#: ../../../src/tsp/doc/index.rst:230
msgid "See Also"
msgstr "Siehe auch"

# 5f49eba1079b40d297bf0872ae69fe06
#: ../../../src/tsp/doc/index.rst:232
msgid ":ref:`type_cost_result`"
msgstr ""

# 81d591e953334f24b72e9680e2ae42f9
#: ../../../src/tsp/doc/index.rst:233
msgid "http://en.wikipedia.org/wiki/Traveling_salesman_problem"
msgstr ""

# 2c62ab4de73248479f416573176f0c4a
#: ../../../src/tsp/doc/index.rst:234
msgid "http://en.wikipedia.org/wiki/Simulated_annealing"
msgstr ""
